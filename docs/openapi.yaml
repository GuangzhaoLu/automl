openapi: 3.0.2
info:
  title: AutoML
  description: | 
    We are designing the AutoML platform that would make it easy for non-technical people to build custom AI solutions and AI-powered process automation.
    
    Please copy the entire content of this doc to the swagger editor (https://editor.swagger.io) to design the API
    
    Reference: [API design for JSON HTTP APIs](https://cloud.google.com/apis/design/errors) [error codes for RPC APIs](https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto)
  termsOfService: https://automl.com/terms/
  contact:
    name: API Support
    url: https://automl.com/support/
    email: support@automl.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v1beta1
servers:
- url: https://automl.com/v1beta1
  description: Supports latest preview features.
- url: https://automl.com/v1
  description: Stable
security:
  - oauth2:
      - self
tags:
- name: Authorization
  description: Authentication and Authorization
  externalDocs:
    url: https://stackoverflow.blog/2022/04/14/the-authorization-code-grant-in-excruciating-detail/
- name: Namespace
  description: provides namespace level isolation
- name: Role
  description: Roles can be defined or modified in the configuration file as a list of dictionaries.
  externalDocs:
    url: https://jupyterhub.readthedocs.io/en/stable/rbac/roles.html#define-role-target
- name: User
  externalDocs:
    url: https://github.com/jupyterhub/jupyterhub/blob/main/docs/source/_static/rest-api.yml
- name: Group
- name: Dataset
- name: Model
- name: TrainingJob
- name: Evaluation
- name: BatchPredictionJob
- name: Endpoint
- name: Operation
- name: Experiment
- name: Run
- name: Datastore
paths:
  /oauth2/authorize:
    get:
      tags:
      - Authorization
      summary: OAuth 2.0 authorize endpoint
      description: |
        Redirect users to this URL to begin the OAuth process.
        It is not an API endpoint.
      parameters:
        - name: client_id
          in: query
          description: The client id
          required: true
          schema:
            type: string
        - name: response_type
          in: query
          description: The response type (always 'code')
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: A state string
          schema:
            type: string
        - name: redirect_uri
          in: query
          description: The redirect url
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content: {}
        400:
          description: OAuth2Error
          content: {}
    post:
      tags:
      - Authorization
      summary: The OAuth server authenticates the user
      description: The OAuth server will render a login form to gather login information, such as a username and password, then the user can enter credentials and the OAuth server authenticates the user.
      operationId: login
      requestBody:
        description: Login Credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
        400:
          description: Invalid username/password supplied
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      x-codegen-request-body-name: body
  /oauth2/token:
    post:
      tags:
      - Authorization
      summary: Request an OAuth2 token
      description: |
        Request an OAuth2 token from an authorization code "Client credential grant type".
        This request completes the OAuth process.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - client_id
                - client_secret
                - code
                - grant_type
                - redirect_uri
              properties:
                client_id:
                  type: string
                  description: The client id
                client_secret:
                  type: string
                  description: The client secret
                grant_type:
                  type: string
                  description: The grant type (always 'authorization_code')
                code:
                  type: string
                  description: The code provided by the authorization redirect. value = client_credentials or code
                redirect_uri:
                  type: string
                  description: The redirect url
        required: true
      responses:
        200:
          description: JSON response including the token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The new API token for the user
                  expires_in: 
                    default: 300
                    type: integer
                    description: The expires time (s).
                  token_type:
                    default: Bearer
                    type: string
                    description: Will always be 'Bearer'
                  scopes:
                    default: example_role_A example_role_B
                    type: string
                    description: space separated defined role for role-based access control
  /namespaces/{namespace}:
    parameters:
      - $ref: '#/components/parameters/namespace'
    put:
      operationId: putNamespace
      summary: Create a namespace
      description: Creates a new namespace object. A namespace enables the contextual grouping of related jobs and datasets. Namespaces must contain only letters (`a-z`, `A-Z`), numbers (`0-9`), underscores (`_`), dashes (`-`), colons (`:`), slashes (`/`), or dots (`.`). A namespace is case-insensitive with a maximum length of `1024` characters. Note jobs and datasets will be unique within a namespace, but not across namespaces.
      tags:
        - Namespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namespace'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
        default:
          $ref: '#/components/responses/default'
    get:
      operationId: getNamespace
      summary: Retrieve a namespace
      description: Returns a namespace.
      tags:
        - Namespace
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
        default:
          $ref: '#/components/responses/default'
  /namespaces:
    get:
      operationId: getNamespaces
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all namespaces
      description: Returns a list of namespaces.
      tags:
        - Namespace
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Namespace'
        default:
          $ref: '#/components/responses/default'
  /roles:
    get:
      tags:
      - Role
      summary: List roles
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: The list of roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Role"
        default:
          $ref: '#/components/responses/default'
      security: []
  /user:
    get:
      tags:
      - User
      summary: Return authenticated user's model
      responses:
        200:
          description: |
            The authenticated user's model is returned
            with additional information about the permissions associated with the request token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestIdentity"
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - read:users
            - read:users:name
            - read:users:groups
            - read:roles:users
            - admin:auth_state
  /users:
    get:
      tags:
      - User
      summary: List users
      responses:
        200:
          description: The Hub's user list
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - read:users
            - read:users:name
            - read:users:groups
            - read:roles:users
            - admin:auth_state
    post:
      tags:
      - User
      summary: Create multiple users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                usernames:
                  type: array
                  description: list of usernames to create
                  items:
                    type: string
                admin:
                  type: boolean
                  description: whether the created users should be admins
        required: true
      responses:
        201:
          description: The users have been created
          content:
            application/json:
              schema:
                type: array
                description: The created users
                items:
                  $ref: "#/components/schemas/User"
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - admin:users
      x-codegen-request-body-name: body
  /users/{user}:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      tags:
      - User
      summary: Get a user by user id
      responses:
        200:
          description: The User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - read:users
            - read:users:name
            - read:users:groups
            - read:roles:users
            - admin:auth_state
    delete:
      tags:
      - User
      summary: Delete a user
      responses:
        204:
          description: The user has been deleted
          content: {}
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - admin:users
    patch:
      tags:
      - User
      summary: Modify a user
      description: Change a user's name or admin status
      requestBody:
        description:
          Updated user info. At least one key to be updated (name or admin)
          is required.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description:
                    the new name (optional, if another key is updated i.e.
                    admin)
                admin:
                  type: boolean
                  description:
                    update admin (optional, if another key is updated i.e.
                    name)
        required: true
      responses:
        200:
          description: The updated user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - admin:users
      x-codegen-request-body-name: body
  /groups:
    get:
      tags:
      - Group
      summary: List groups
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: The list of groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Group"
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - read:groups
            - read:groups:name
            - read:roles:groups
    post:
      tags:
      - Group
      summary: Create a group
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        201:
          description: The group has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - admin:groups
  /groups/{group}:
    parameters:
      - $ref: '#/components/parameters/group'
    get:
      tags:
      - Group
      summary: Get a group 
      responses:
        200:
          description: The group model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - read:groups
            - read:groups:name
            - read:roles:groups
    delete:
      tags:
      - Group
      summary: Delete a group
      responses:
        204:
          description: The group has been deleted
          content: {}
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - admin:groups
  /groups/{group}/users:
    parameters:
      - $ref: '#/components/parameters/group'
    post:
      tags:
      - Group
      summary: Add users to a group
      requestBody:
        description: The users to add to the group
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  description: List of usernames to add to the group
                  items:
                    type: string
        required: true
      responses:
        200:
          description: The users have been added to the group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - groups
      x-codegen-request-body-name: body
    delete:
      tags:
      - Group
      summary: |
        Remove users from a group
      description: |
        Body should be a JSON dictionary
        where `users` is a list of usernames to remove from the groups.

        ```json
        {
          "users": ["name1", "name2"]
        }
        ```
      responses:
        200:
          description: The users have been removed from the group
          content: {}
        default:
          $ref: '#/components/responses/default'
      security:
        - oauth2:
            - groups
      x-codegen-request-body-name: body
  /namespaces/{namespace}/files/{filename}:
    parameters:
      - $ref: '#/components/parameters/namespace'
    post:
      tags:
      - Dataset
      summary: upload files
      operationId: automl.namespaces.files.create
      parameters:
      - name: filename
        in: path
        description: filename
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              description: the attachment content
              format: binary
          multipart/form-data:
            schema:
              required:
              - file
              properties:
                file:
                  type: string
                  description: the attachment content
                  format: binary
        required: true
      responses:
        200:
          description: Upload was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  uri:
                    $ref: "#/components/schemas/URI"
        400:
          description: Invalid input
          content: {}
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/datasets:
    parameters:
      - $ref: '#/components/parameters/namespace'
    post:
      tags:
      - Dataset
      summary: Creates a dataset
      description: Tabular training data in MinIO Storage is not imported into platform. (When you import from local files, they are imported into MinIO Storage.) When you create a dataset with tabular data, the data is associated with the dataset. Changes you make to your data source in MinIO Storage after dataset creation are incorporated into models subsequently trained with that dataset. A snapshot of the dataset is taken when model training begins.
      operationId: automl.namespaces.datasets.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dataset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
    get:
      tags:
      - Dataset
      description: Lists datasets in the namespace.
      operationId: automl.namespaces.datasets.list
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Dataset"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/datasets/{dataset}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
    get:
      operationId: getDataset
      summary: Retrieve a dataset
      description: Returns a dataset.
      tags:
        - Dataset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        default:
          $ref: '#/components/responses/default'
    delete:
      tags:
      - Dataset
      summary: Delete Dataset by Dataset Id
      operationId: delete_dataset_by_id
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid dataset id value
          content: {}
        default:
          $ref: '#/components/responses/default'
    patch:
      tags:
      - Dataset
      summary: Modify a dataset
      operationId: patch_dataset_by_id
      requestBody:
        description:
          Updated user info. At least one key to be updated (name or admin)
          is required.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dataset"
        required: true
      responses:
        200:
          description: The updated dataset info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
        400:
          description: Invalid dataset id value
          content: {}
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/datasets/{dataset}/tableSpecs:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
    get:
      tags:
      - Dataset
      description: Lists table specs in a dataset.
      operationId: automl.namespaces.datasets.tableSpecs.list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/TableSpec"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/datasets/{dataset}/tableSpecs/{tableSpec}/columnSpecs:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
      - $ref: '#/components/parameters/tableSpec'
    get:
      tags:
      - Dataset
      description: Lists column specs in a table spec.
      operationId: automl.projects.locations.datasets.tableSpecs.columnSpecs.list
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The column specs read.
                items:
                  $ref: "#/components/schemas/ColumnSpec"
                type: array
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/datasets/{dataset}/annotationSpecs/{annotationSpec}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
      - $ref: '#/components/parameters/annotationSpec'
    get:
      operationId: automl.namespaces.datasets.annotationSpecs.get
      description: Gets an AnnotationSpec.
      tags:
        - Dataset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationSpec'
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/models:
    parameters:
      - $ref: '#/components/parameters/namespace'
    get:
      tags:
      - Model
      description: Lists models in the namespace.
      operationId: automl.namespaces.models.list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Model"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
      - Model
      description: Creates a model which will later contain one or more versions
      operationId: automl.namespaces.models.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/models/{model}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/model'
    get:
      operationId: automl.namespaces.models.get
      summary: Retrieve a model
      description: Returns a model.
      tags:
        - Model
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        default:
          $ref: '#/components/responses/default'
    patch:
      tags:
      - Model
      summary: Modify a model
      operationId: patch_model_by_id
      requestBody:
        description:
          Updated model info. At least one key to be updated (name or admin)
          is required.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model"
        required: true
      responses:
        200:
          description: The updated dataset info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        400:
          description: Invalid dataset id value
          content: {}
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/models/{model}/versions:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/model'
    get:
      tags:
      - Model
      description: Lists versions
      operationId: automl.namespaces.models.versions.list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Version"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
      - Model
      description: Creates a new version of a model
      operationId: automl.namespaces.models.versions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Version"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/models/{model}/versions/{version}:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/model'
    - $ref: '#/components/parameters/version'
    get:
      operationId: automl.namespaces.models.versions.get
      summary: Retrieve a version
      description: Returns a version.
      tags:
        - Model
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        default:
          $ref: '#/components/responses/default'
    patch:
      tags:
      - Model
      summary: Modify a version
      operationId: automl.namespaces.models.versions.patch
      requestBody:
        description:
          Updated version info. At least one key to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Version"
        required: true
      responses:
        200:
          description: The updated dataset info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
        400:
          description: Invalid version id value
          content: {}
        default:
          $ref: '#/components/responses/default'
    delete:
      tags:
      - Model
      summary: Delete version
      operationId: automl.namespaces.models.versions.delete
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid id
          content: {}
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/trainingJob:
    parameters:
    - $ref: '#/components/parameters/namespace'
    post:
      tags:
      - TrainingJob
      description: Creates a TrainingJob. A created TrainingJob right away will be attempted to be run. When you train a model, several model evaluations are created for it, a summary evaluation, and one evaluation for each annotation.
      operationId: automl.namespaces.trainingJob.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrainingJob"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingJob"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/trainingJob/{job}:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/job'
    get:
      tags:
      - TrainingJob
      description: Gets a TrainingJob
      operationId: automl.namespaces.trainingJob.get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingJob'
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/models/{model}/versions/{version}/evaluations:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/model'
    - $ref: '#/components/parameters/version'
    get:
      tags:
        - Evaluation
      description: Lists model evaluations.
      operationId: automl.projects.locations.models.version.evaluations.list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Evaluation"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/models/{model}/versions/{version}/evaluations/{evaluation}/slices:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/model'
    - $ref: '#/components/parameters/version'
    - $ref: '#/components/parameters/evaluation'
    get:
      tags:
        - Evaluation
      description: Lists ModelEvaluationSlices in a ModelEvaluation. Tabular forecasting models do not have evaluation metric slices. Tabular regression models do not have evaluation metric slices.
      operationId: automl.projects.locations.models.version.evaluations.slices.list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/EvaluationSlice"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/batchPredictionJobs:
    parameters:
    - $ref: '#/components/parameters/namespace'
    post:
      tags:
      - BatchPredictionJob
      description: Creates a batchPredictionJobs.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchPredictionJob"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchPredictionJob"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/batchPredictionJob/{job}:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/job'
    get:
      tags:
      - BatchPredictionJob
      description: Gets a batchPredictionJob
      operationId: automl.namespaces.batchPredictionJob.get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPredictionJob'
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/endpoints:
    parameters:
      - $ref: '#/components/parameters/namespace'
    post:
      tags:
      - Endpoint
      description: Creates an Endpoint, If successful, the response body contains a newly created instance of Operation.
      operationId: automl.namespaces.endpoints.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Endpoint"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
    get:
      tags:
      - Endpoint
      description: Lists endpoints in the namespace.
      operationId: automl.namespaces.endpoints.list
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Endpoint"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/endpoints/{endpoint}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/endpoint'
    delete:
      tags:
      - Endpoint
      description: Deletes an Endpoint.
      operationId: automl.namespaces.endpoints.delete
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/endpoints/{endpoint}/predict:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/endpoint'
    post:
      tags:
      - Endpoint
      description: Perform an online prediction.
      operationId: automl.namespaces.endpoints.predict
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PredictRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PredictResponse"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/operations/{operation}:
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: automl.namespaces.operations.get
      parameters:
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/operation'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
      tags:
        - Operation
  /namespaces/{namespace}/operations/{operation}/cancel:
    post:
      description: Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a Status.code corresponding to Code.CANCELLED.
      operationId: automl.namespaces.operations.cancel
      parameters:
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/operation'
      responses:
        200:
          description: If successful, the response body is empty.
          content: {}
        default:
          $ref: '#/components/responses/default'
      tags:
        - Operation
  /namespaces/{namespace}/experiments:
    parameters:
      - $ref: '#/components/parameters/namespace'
    get:
      tags:
        - Experiment
      description: Finds all experiments.
      operationId: automl.namespaces.experiments.get
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Experiment"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
  /namespaces/{namespace}/runs:
    parameters:
      - $ref: '#/components/parameters/namespace'
    get:
      tags:
        - Run
      description: Finds all runs. An experiment will typically contain multiple runs. A run can have zero or more child runs.
      operationId: automl.namespaces.runs.get
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
          description: Successful response
        default:
          $ref: '#/components/responses/default'
components:
  schemas:
    ID:
      type: integer
      format: int64
      description: the unique identifier of that resource
    DateTime:
      type: string
      format: date-time
      description: Output only.
      example: "2021-04-13T01:00:54.091953Z"
    Namespace:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          description: The name of the namespace.
          type: string
        createTime:
          $ref: "#/components/schemas/DateTime"
        updateTime:
          $ref: "#/components/schemas/DateTime"
        ownerId:
          description: The owner of the namespace.
          $ref: "#/components/schemas/ID"
        description:
          description: The description of the namespace.
          type: string
    State:
      enum:
        - UNSPECIFIED
        - QUEUED
        - PENDING
        - RUNNING
        - SUCCEEDED
        - FAILED
        - CANCELLING
        - CANCELLED
        - PAUSED
      type: string
      description: |
         * `UNSPECIFIED` - The job state is unspecified.
         * `QUEUED` - The job has been just created or resumed and processing has not yet begun.
         * `PENDING` - The service is preparing to run the job.
         * `RUNNING` -   The job is in progress.
         * `SUCCEEDED` - The job completed successfully.
         * `FAILED` - The job failed.
         * `CANCELLING` - The job is being cancelled. From this state the job may only go to either SUCCEEDED, FAILED or CANCELLED.
         * `CANCELLED` - The job has been cancelled.
         * `PAUSED` - The job has been stopped, and can be resumed.
    TrainingJob:
      type: object
      properties:
        jobId:
          $ref: "#/components/schemas/ID"
        createTime:
          $ref: "#/components/schemas/DateTime"
        startTime:
          $ref: "#/components/schemas/DateTime"
          description: Output only. Time when the Job for the first time entered the JOB_STATE_RUNNING state.
        endTime:
          $ref: "#/components/schemas/DateTime"
          description: Output only. Time when the Job entered any of the following states - SUCCEEDED, FAILED, CANCELLED.
        updateTime:
          $ref: "#/components/schemas/DateTime"
        state:
          $ref: '#/components/schemas/State'
        error:
          $ref: '#/components/schemas/Status'
        jobPosition:
          type: integer
          format: int64
          description: Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.
        trainingInput:
          $ref: '#/components/schemas/ModelMetadata'
        trainingOnput:
          type: object
    BatchPredictionJob:
      type: object
      properties:
        jobId:
          $ref: "#/components/schemas/ID"
        createTime:
          $ref: "#/components/schemas/DateTime"
        startTime:
          $ref: "#/components/schemas/DateTime"
          description: Output only. Time when the Job for the first time entered the JOB_STATE_RUNNING state.
        endTime:
          $ref: "#/components/schemas/DateTime"
          description: Output only. Time when the Job entered any of the following states - SUCCEEDED, FAILED, CANCELLED.
        updateTime:
          $ref: "#/components/schemas/DateTime"
        state:
          $ref: '#/components/schemas/State'
        error:
          $ref: '#/components/schemas/Status'
        jobPosition:
          type: integer
          format: int64
          description: Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.
        batchPredictionJob:
          $ref: '#/components/schemas/BatchPredictionInput'
        batchPredictionOutput:
          $ref: '#/components/schemas/BatchPredictionOutput'
    DataFormat:
      type: string
      description: |
         The format used to separate data instances in the source and destination files. 
         * `UNSPECIFIED` - Unspecified format.
         * `JSON` - Each line of the file is a JSON dictionary representing one record.
         * `TF_RECORD` - The source file is a TFRecord file. Currently available only for input data.
         * `TF_RECORD_GZIP` - The source file is a GZIP-compressed TFRecord file. Currently available only for input data.
         * `CSV` -   Values are comma-separated rows, with keys in a separate file. Currently available only for output data.
      enum:
        - UNSPECIFIED
        - JSON
        - TF_RECORD
        - TF_RECORD_GZIP
        - CSV
    DedicatedResources:
      type: object
      description: The config of resources used by the Model during the batch prediction. If the Model supports DEDICATED_RESOURCES this config may be provided (and the job will use these resources), if the Model doesn't support AUTOMATIC_RESOURCES, this config must be provided.
      properties:
        startingReplicaCount:
          type: integer
          description: Immutable. The number of machine replicas used at the start of the batch operation. If not set, platform decides starting number, not greater than maxReplicaCount
        maxReplicaCount:
          type: integer
          description: Immutable. The maximum number of machine replicas the batch operation may be scaled to. The default value is 10.
        machineSpec:
          type: object
          description: Required. Immutable. The specification of a single machine.
          properties:
            machineType:
              description: Immutable. The type of the machine.
              type: string
              enum:
                - standard-2
                - standard-4
                - highmem-2
                - highmem-4
                - highcpu-2
                - highcpu-4
            acceleratorCount:
              description: The number of accelerators to attach to the machine.
              type: integer
            acceleratorType:
              description: Immutable. The type of accelerator(s) that may be attached to the machine as per acceleratorCount.
              type: string
              enum:
                - UNSPECIFIED
                - NVIDIA_TESLA_K80
                - NVIDIA_TESLA_A100
                - TPU_V2
    BatchPredictionInput:
      type: object
      properties:
        instancesFormat:
          # Required. The format of the input data files.
          $ref: "#/components/schemas/DataFormat"
        inputPaths:
          $ref: "#/components/schemas/URI"
        predictionsFormat:
          # Format of the output data files, defaults to JSON.
          $ref: "#/components/schemas/DataFormat"
        outputPaths:
          $ref: "#/components/schemas/URI"
        modelId:
          # description: The id of the Model resoure that produces the predictions via this job
          $ref: "#/components/schemas/ID"
        versionId:
          # description: specify a version of the model to use. 
          $ref: "#/components/schemas/ID"
        dedicatedResources:
          $ref: "#/components/schemas/DedicatedResources"
    DoubleRange:
      description: A range between two double numbers.
      properties:
        end:
          description: End of the range, exclusive.
          format: double
          type: number
        start:
          description: Start of the range, inclusive.
          format: double
          type: number
      type: object
    TablesAnnotation:
      description: Contains annotation details specific to Tables.
      properties:
        baselineScore:
          description: Output only. Stores the prediction score for the baseline example, which is defined as the example with all values set to their baseline values. This is used as part of the Sampled Shapley explanation of the model's prediction. This field is populated only when feature importance is requested. For regression models, this holds the baseline prediction for the baseline example. For classification models, this holds the baseline prediction for the baseline example for the argmax class.
          format: float
          type: number
        predictionInterval:
          $ref: "#/components/schemas/DoubleRange"
          description: Output only. Only populated when target_column_spec has FLOAT64 data type. An interval in which the exactly correct target value has 95% chance to be in.
        score:
          description: Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher value means greater confidence in the returned value. For target_column_spec of FLOAT64 data type the score is not populated.
          format: float
          type: number
        tablesModelColumnInfo:
          description: Output only. Auxiliary information for each of the model's input_feature_column_specs with respect to this particular prediction. If no other fields than column_spec_name and column_display_name would be populated, then this whole field is not.
          items:
            $ref: "#/components/schemas/TablesModelColumnInfo"
          type: array
        value:
          description: "The predicted value of the row's target_column. The value depends on the column's DataType: * CATEGORY - the predicted (with the above confidence `score`) CATEGORY value. * FLOAT64 - the predicted (with above `prediction_interval`) FLOAT64 value."
      type: object
    Row:
      description: A representation of a row in a relational table.
      properties:
        columnSpecIds:
          description: "The resource IDs of the column specs describing the columns of the row. If set must contain, but possibly in a different order, all input feature column_spec_ids of the Model this row is being passed to. Note: The below `values` field must match order of this field, if this field is set."
          items:
            type: string
          type: array
        values:
          description: Required. The values of the row cells, given in the same order as the column_spec_ids, or, if not set, then in the same order as input feature column_specs of the Model this row is being passed to.
          items: {}
          type: array
      type: object
    TablesModelColumnInfo:
      description: An information specific to given column and Tables Model, in context of the Model and the predictions created by it.
      properties:
        columnDisplayName:
          description: Output only. The display name of the column (same as the display_name of its ColumnSpec).
          type: string
        columnSpecName:
          description: Output only. The name of the ColumnSpec describing the column. Not populated when this proto is outputted to BigQuery.
          type: string
        featureImportance:
          description: "Output only. When given as part of a Model (always populated): Measurement of how much model predictions correctness on the TEST data depend on values in this column. A value between 0 and 1, higher means higher influence. These values are normalized - for all input feature columns of a given model they add to 1. When given back by Predict (populated iff feature_importance param is set) or Batch Predict (populated iff feature_importance param is set): Measurement of how impactful for the prediction returned for the given row the value in this column was. Specifically, the feature importance specifies the marginal contribution that the feature made to the prediction score compared to the baseline score. These values are computed using the Sampled Shapley method."
          format: float
          type: number
      type: object
    BatchPredictionOutput:
      type: object
    Credentials:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        password:
          type: string
          format: encrypted string
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          description: The user's name
        admin:
          type: boolean
          description: Whether the user is an admin
        roles:
          type: array
          description: The names of roles this user has
          items:
            type: string
        groups:
          type: array
          description: The names of groups where this user is a member
          items:
            type: string
        pending:
          type: string
          description: The currently pending action, if any
          enum:
            - spawn
            - stop
        auth_state:
          type: object
          properties: {}
          description: |
            Authentication state of the user. Only available with admin:users:auth_state
            scope. None otherwise.
    Group:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          description: The group's name
        users:
          type: array
          description: The names of users who are members of this group
          items:
            type: string
        roles:
          type: array
          description: The names of roles this group has
          items:
            type: string
    Role:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          description: The role's name
        description:
          type: string
          description: The role's description
        scopes:
          type: array
          description: Roles are collections of scopes that specify the level of what a client is allowed to do
          items:
            type: string
    RequestIdentity:
      description: |
        The model for the entity making the request.
        Extends User model to add information about the specific credentials (e.g. session).
      allOf:
        - type: object
          oneOf:
            - $ref: "#/components/schemas/User"
          discriminator:
            propertyName: kind
            mapping:
              user: "#/components/schemas/User"
        - type: object
          properties:
            session_id:
              type: string
              nullable: true
              description: |
                The session id associated with the request's OAuth token, if any.
                null, if the request token not associated with a session id.

                Added in 2.0.
            scopes:
              type: array
              description: |
                The list of all expanded scopes the request credentials have access to.

                Added in 2.0.
              items:
                type: string
              example:
                - "read:users"
    URI:
      oneOf:
        - type: string
          description: Paths (URIs) to the Minio buckets containing the training data. There can be more than one.
          example: s3://datasets/train.csv
        - type: array
          description: multiple files
          items:
            type: string
            description: Paths (URIs) to the Minio buckets containing the training data. There can be more than one.
            example: s3://datasets/train.csv
    Dataset:
      description: A workspace for solving a single, particular machine learning (ML) problem. A workspace contains examples that may be annotated.
      properties:
        id:
          $ref: "#/components/schemas/ID"
        createTime:
          $ref: "#/components/schemas/DateTime"
        description:
          description: User-provided description of the dataset. The description can be up to 25000 characters long.
          type: string
        namespaceId:
          # description: Output only. The namespace id of the dataset.
          $ref: "#/components/schemas/ID"
        name:
          description: Required. The user-defined name of the Dataset. The name can be up to 128 characters long and can be consist of any UTF-8 characters.
          type: string
        uri:
          # description: Paths (URIs) to the MinIO buckets containing the training data. There can be more than one. Each URI has the form, s3://datasets/train.csv
          $ref: "#/components/schemas/URI"
      type: object
    TableSpec:
      description: A specification of a relational table. The table's schema is represented via its child column specs. 
      properties:
        columnCount:
          description: Output only. The number of columns of the table. That is, the number of child ColumnSpec-s.
          format: int64
          type: string
        id:
          $ref: "#/components/schemas/ID"
        rowCount:
          description: Output only. The number of rows (i.e. examples) in the table.
          format: int64
          type: string
        validRowCount:
          description: Output only. The number of valid rows (i.e. without values that don't match DataType-s of their columns).
          format: int64
          type: string
        uri:
          $ref: "#/components/schemas/URI"
      type: object
    ColumnSpec:
      type: object
      description: A representation of a column in a relational table. 
      properties:
        id:
          $ref: "#/components/schemas/ID"
        dataType:
          enum:
            - UNSPECIFIED
            - FLOAT64
            - TIMESTAMP
            - STRING
            - CATEGORY
          type: string
          description: The data type of elements stored in the column.
    AnnotationSpec:
      description: A definition of an annotation spec.
      properties:
        name:
          description: Required. The name of the annotation spec to show in the interface. The name can be up to 32 characters long and must match the regexp `[a-zA-Z0-9_]+`.
          type: string
        id:
          $ref: "#/components/schemas/ID"
        createTime:
          $ref: "#/components/schemas/DateTime"
        updateTime:
          $ref: "#/components/schemas/DateTime"
      type: object
    FractionSplit:
      type: object
      description: The fractionSplit object is not supported for forecasting models.
      properties:
        trainingFraction:
          format: float
          type: number
          description: The fraction of the input data that is to be used to train the Model.
        validationFraction:
          format: float
          type: number
          description: The fraction of the input data that is to be used to validate the Model.
        testFraction:
          format: float
          type: number
          description: The fraction of the input data that is to be used to evaluate the Model
    PredefinedSplit:
      type: object
      description: Optional. The column containing the data split values (TRAIN, VALIDATION, TEST). The predefinedSplit object is not supported for forecasting models.
      properties:
        key:
          type: string
          description: Required. The key is a name of one of the Dataset's data columns. The value of the key (either the label's value or value in the column) must be one of {training, validation, test}, and it defines to which set the given piece of data is assigned. If for a piece of data the key is not present or has an invalid value, that piece is ignored by the pipeline.
          enum:
            - TRAIN
            - VALIDATION
            - TEST
    TimestampSplit:
      type: object
      description: The fractionSplit object is not supported for forecasting models. The youngest data pieces are assigned to training set, next to validation set, and the oldest to the test set.
      properties:
        trainingFraction:
          format: float
          type: number
          description: The fraction of the input data that is to be used to train the Model.
        validationFraction:
          format: float
          type: number
          description: The fraction of the input data that is to be used to validate the Model.
        testFraction:
          format: float
          type: number
          description: The fraction of the input data that is to be used to evaluate the Model.
        key:
          type: string
          description: Required. The key is a name of one of the Dataset's data columns. The values of the key (the values in the column) must be in  date-time format. If for a piece of data the key is not present or has an invalid value, that piece is ignored by the pipeline.
    ModelMetadata:
      description: Union field model_metadata. The model metadata that is specific to the problem type. Must match the metadata type of the dataset used to train the model. model_metadata can be only one of the following
      oneOf:
        - $ref: '#/components/schemas/RegressionModelMetadata'
        - $ref: '#/components/schemas/ClassficationModelMetadata'
        - $ref: '#/components/schemas/ForecastingModelMetadata'
    TabularModelMetadata:
      type: object
      description: Metadata for Tabular models, metadata is used to train the model. When you train an AutoML model using a tabular dataset, the platform selects a default optimization objective based on your model type and the data type used for your target column.
      properties:
        modelId:
          # description: The resource id of the Model.
          $ref: "#/components/schemas/ID"
        modelType:
          description: The model type that is specific to the problem type. Must match the metadata type of the dataset used to train the model. 
          enum:
            - Tabular
          type: string
        versionId:
          # description: The resource id of the Version.
          $ref: "#/components/schemas/ID"
        datasetId:
          description: Optional. The resource ID of the dataset used to create the model. The dataset must come from the same namespace.
          type: integer
          format: int64
        disableEarlyStopping:
          description: This disables the early stopping feature. By default, the early stopping feature is enabled, which means ends model training when detects that no more improvents can be made.
          type: boolean
        split:
          description: Union field split. The instructions how the input data should be split between the training, validation and test sets. split can be only one of the following
          oneOf:
            - $ref: '#/components/schemas/FractionSplit'
            - $ref: '#/components/schemas/PredefinedSplit'
            - $ref: '#/components/schemas/TimestampSplit'
        targetColumn:
          type: string
          description: The name of the column to train as the label.
        weightColumn:
          type: string
          description: (Optional) The name of the weight column.
        predictionType:
          enum: 
            - classification
            - regression
            - forecasting
          type: string
        trainBudgetMilliNodeHours:
          type: number
          format: int32
          description: "The maximum amount of time you want the model to train, in milli node hours (1,000 milli node hours equals one node hour)."
        transformations:
          type: array
          description: >
            Transformations to apply to the input columns (i.e. columns other
            than the targetColumn). Each transformation may produce multiple
            result values from the column's value, and all are used for training.
            If an input column has no transformations on it, such a column is
            ignored by the training, except for the targetColumn, which should have
            no transformations defined on.
          items:
            oneOf:
            - type: object
              description: >
                The training task will infer a single best transformation for
                the column, based on the statistics of the Dataset, with invalid
                values not allowed where applicable.
              required:
              - columnName
              properties:
                type:
                  type: string
                  enum: [auto]
                columnName:
                  type: string
                  description: >
                    The name of an input column on which to perform the
                    transformation.
            - type: object
              description: |
                'Treats the column as numeric and performs following
                transformation functions on its values:
                * Converts to float32.
                * Computes z_score.
                * Computes log(value + 1) if the value is at least 0.
                  Otherwise, this transformation function is not applied and
                  this output is considered missing.
                * Computes z_score of log(value+1) if the value is at least 0.
                  Otherwise, this transformation function is not applied and
                  this output is considered missing.
                * Outputs TRUE if values is NULL, FALSE otherwise.
                This transformation fails for values which do not represent
                valid float32 numbers. Valid, but extreme or outlier values,
                receive no special treatment.'
              required:
              - columnName
              properties:
                type:
                  type: string
                  enum: [numeric]
                columnName:
                  type: string
                  description: >
                    The name of an input column on which to perform the
                    transformation.
                invalidValuesAllowed:
                  type: boolean
                  description: >
                    If true, the training task will create an additional
                    boolean feature indicating whether the value is valid.
                    Otherwise input rows with invalid values will be discarded.
                  default: false
            - type: object
              description: |
                'Treats the column as categorical (i.e. values are from
                discrete finite space, and have no order defined between them)
                and performs following transformation funcitons on its values:
                * Outputs the value verbatim as is, as string.
                * Assigns a dictionary lookup index to the value (all equal
                  values receive the same index), and outputs an embedding of
                  the value.
                If a value is present less than 5 times in the training set,
                it is always treated as it equaled "unknown" for the purposes
                of this transformation.'
              required:
              - columnName
              properties:
                type:
                  type: string
                  enum: [categorical]
                columnName:
                  type: string
                  description: >
                    The name of an input column on which to perform the
                    transformation.
            - type: object
              description: |
                'Treats the column as a timestamp and performs following
                transformation functions on its values:
                * Performs all numeric transformation functions.
                * Extracts year, month, day and weekday from the timestamp,
                  and performs on each all the categorical transformation
                  functions as if they were separate categorical values.
                The whole transformation fails for values that are not
                valid timestamps, but unlikely timestamp values (e.g. far in
                the past or future) are treated as all other values.'
              required:
              - columnName
              properties:
                type:
                  type: string
                  enum: [timestamp]
                columnName:
                  type: string
                  description: >
                    The name of an input column on which to perform the
                    transformation.
                timeFormat:
                  type: string
                  description: >
                    'The format in which this time field is expressed. The
                    timeFormat must either be one of:
                    * `unix-seconds`
                    * `unix-milliseconds`
                    * `unix-microseconds`
                    * `unix-nanoseconds`
                    (for respectively number of seconds, milliseconds
                    microseconds and nanoseconds since start of the Unix epoch);
                    or be written in `strftime` syntax. If timeFormat is not
                    set, then the default format is RFC 3339 `date-time` format,
                    where `time-offset` = `"Z"` (e.g. 1985-04-12T23:20:50.52Z)'
                invalidValuesAllowed:
                  type: boolean
                  description: >
                    Iff true, the training task will create an additional
                    boolean feature indicating whether the value is valid.
                    Otherwise input rows with invalid values will be discarded.
            - type: object
              description: |
                'Treats the column as text and performs following
                transformation funcitons on its values:
                * Outputs the value verbatim as is, as string.
                * Tokenizes text to words, using unicode script boundaries,
                  assigns a dictionary lookup index to each word and generates
                  its embedding, as well as a mean embedding. Outputs the mean
                  embedding. Missing values also get an index and an
                  embedding. Stop-words are processed same way as all other
                  words.'
              required:
              - columnName
              properties:
                type:
                  type: string
                  enum: [text]
                columnName:
                  type: string
                  description: >
                    The name of an input column on which to perform the
                    transformation.
            - type: object
              description: |
                'Treats the columns as an array of numeric values, and
                performs following transformation functions on its values:
                * Computes average of the values in the arrays, and then
                  performs on it all the numeric transformation functions.
                  Average of an empty array is 0.'
              required:
              - columnName
              properties:
                type:
                  type: string
                  enum: [numeric-array]
                columnName:
                  type: string
                  description: >
                    The name of an input column on which to perform the
                    transformation.
                invalidValuesAllowed:
                  type: boolean
                  description: >
                    Iff true, the training task will create an additional
                    boolean feature indicating whether the value is valid.
                    Otherwise input rows with invalid values will be discarded.
            - type: object
              description: |
                'Treats the columns as an array of categorical values, and
                performs following transformation funcitons on its values:
                * Assigns a dictionary lookup index for each value in the
                  array, generates its embedding then takes the mean of all
                  embeddings to generate an overall one which is outputted.
                  Empty arrays generate an all-zero embedding.'
              required:
              - columnName
              properties:
                type:
                  type: string
                  enum: [categorical-array]
                columnName:
                  type: string
                  description: >
                    The name of an input column on which to perform the
                    transformation.
            - type: object
              description: |
                'Treats the columns as an array of text values, and performs
                following transformation functions on its values:
                * Concatenates all text values in an array into a single text
                  value using the space (` `) as a delimiter, and then
                  performs on it all the text transformation functionss.
                  Empty arrays are treated as empty texts.'
              required:
              - columnName
              properties:
                type:
                  type: string
                  enum: [text-array]
                columnName:
                  type: string
                  description: >
                    The name of an input column on which to perform the
                    transformation.
            discriminator:
              propertyName: type
    RegressionModelMetadata:
      allOf:
        - $ref: "#/components/schemas/TabularModelMetadata"
        - type: object
          properties:
            optimizationObjective:
              type: string
              enum:
                - minimize-rmse
                - minimize-mae
                - minimize-rmsle
              description: | 
                When you train a model, Platform selects a default optimization objective based on your model type and the data type used for your target column.
                * `minimize-rmse` RMSE - Minimize root-mean-squared error (RMSE). Captures more extreme values accurately. Default value.
                * `minimize-mae` MAE - Minimize mean-absolute error (MAE). Views extreme values as outliers with less impact on model.
                * `minimize-rmsle` RMSLE - Minimize root-mean-squared log error (RMSLE). Penalizes error on relative size rather than absolute value. Useful when both predicted and actual values can be quite large.
    ClassficationModelMetadata:
      allOf:
        - $ref: "#/components/schemas/TabularModelMetadata"
        - type: object
          properties:
            optimizationObjective:
              type: string
              enum:
                - maximize-au-roc
                - minimize-log-loss
                - maximize-au-prc
                - maximize-precision-at-recall
                - maximize-recall-at-precision
              description: | 
                When you train a model, Platform selects a default optimization objective based on your model type and the data type used for your target column.
                * `maximize-au-roc` AUC ROC - Maximize the area under the receiver operating characteristic (ROC) curve. Distinguishes between classes. Default value for binary classification.
                * `minimize-log-loss` Log loss - Keep prediction probabilities as accurate as possible. Only supported objective for multi-class classification.
                * `maximize-au-prc` AUC PR -   Maximize the area under the precision-recall curve. Optimizes results for predictions for the less common class.
                * `maximize-precision-at-recall` Precision at Recall - Optimize precision at a specific recall value.
                * `maximize-recall-at-precision` Recall at Precision - Optimize recall at a specific precision value.
            optimizationObjectivePrecisionValue:
              description: Required when optimizationObjective is "maximize-recall-at-precision". Must be between 0 and 1, inclusive.
              format: float
              type: number
            optimizationObjectiveRecallValue:
              description: Required when optimizationObjective is "maximize-precision-at-recall". Must be between 0 and 1, inclusive.
              format: float
              type: number
    ForecastingModelMetadata:
      allOf:
        - $ref: "#/components/schemas/TabularModelMetadata"
        - type: object
          properties:
            timeColumn:
              description: You must specify a time column and it must have a value for every row. The time column is used to place the observation represented by that row in time.
              type: string
            timeSeriesIdentifierColumn:
              type: string
              description: One of your columns in your training data for a forecasting model must be specified as the time series identifier. Forecasting training data usually includes multiple time series, and the identifier tells Platform which time series a given observation in the training data is part of. All of the rows in a given time series have the same value in the time series identifier column.Some common time series identifiers might be the product ID, a store ID, or a region. When you have multiple time series in your training data, there should be a specific column that differentiates them.
            dataGranularity:
              type: object
              properties:
                unit:
                  type: string
                  description: The unit to use for the granularity of your training data and your forecast horizon and context window. Can be minute, hour, day, week, month, or year. Select day if you would like to use holiday effect modeling.
                  enum:
                    - minute
                    - hour
                    - day 
                    - week
                    - month
                    - year
                quantity:
                  type: number
                  format: int32
                  description: The number of granularity units that make up the interval between observations in your training data. Must be one for all units except minutes, which can be 1, 5, 10, 15, or 30.
            hierarchyConfig:
              type: object
              description: https://cloud.google.com/vertex-ai/docs/tabular-data/forecasting/hierarchical
              properties:
                groupColumns:
                  type: array
                  items:
                    type: string
                    description: Column names in your training input table that identify the grouping for the hierarchy level. The column(s) must be `time_series_attribute_columns`.
                groupTotalWeight:
                  type: number
                  format: int32
                  description: Weight of the group aggregated loss relative to the individual loss. Disabled if set to `0.0` or is not set. If the group column is not set, all time series will be treated as part of the same group and is aggregated over all time series. 
                temporalTotalWeight:
                  type: number
                  format: int32
                  description: Weight of the time aggregated loss relative to the individual loss. Disabled if set to `0.0` or is not set.
                groupTemporalTotalWeight:
                  type: number
                  format: int32
                  description: Weight of the total (group x time) aggregated loss relative to the individual loss. Disabled if set to `0.0` or is not set. If the group column is not set, all time series will be treated as part of the same group and is aggregated over all time series.
            holidayRegions:
              type: array
              description:  (Optional) One or more geographical regions based on which the holiday effect is applied in modeling. During training, Vertex AI creates holiday categorical features within the model based on the date from the time column and the specified geographical regions. To enable it, set dataGranularity.unit to day and specify one or more regions in the holidayRegions field. By default, holiday effect modeling is disabled.
              items:
                type: string
                description: "https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create-time-series#holiday_region"
            forecastHorizon:
              type: number
              format: int32
              description: The size of the forecast horizon, specified in granularity units. The forecast horizon is the period of time the model should forecast results for.
            contextWindow:
              type: number
              format: int32
              description: The number of granularity units the model should look backward to include at training time. 
            timeSeriesAttributeColumns:
              type: array
              description: The name or names of the columns that are time series attributes. 
              items:
                type: string
            availableAtForecastColumns:
              type: array
              description: The name or names of the covariate columns whose value is known at forecast time. 
              items:
                type: string
            unavailableAtForecastColumns:
              type: array
              description: The name or names of the covariate columns whose value is unknown at forecast time.
              items:
                type: string
            optimizationObjective:
              type: string
              enum:
                - minimize-rmse
                - minimize-mae
                - minimize-rmsle
                - minimize-rmspe
                - minimize-wape-mae
                - minimize-quantile-loss
              description: | 
                When you train a model, Platform selects a default optimization objective based on your model type and the data type used for your target column.
                * `minimize-rmse` RMSE - Minimize root-mean-squared error (RMSE). Captures more extreme values accurately and is less biased when aggregating predictions. Default value.
                * `minimize-mae` MAE - Minimize mean-absolute error (MAE). Views extreme values as outliers with less impact on model.
                * `minimize-rmsle` RMSLE -   Minimize root-mean-squared log error (RMSLE). Penalizes error on relative size rather than absolute value. Useful when both predicted and actual values can be quite large.
                * `minimize-rmspe` RMSPE - Minimize root-mean-squared percentage error (RMSPE). Captures a large range of values accurately. Similar to RMSE, but relative to target magnitude. Useful when the range of values is large.
                * `minimize-wape-mae` WAPE - Minimize the combination of weighted absolute percentage error (WAPE) and mean-absolute-error (MAE). Useful when the actual values are low.
                * `minimize-quantile-loss` Quantile loss - Minimize the scaled pinball loss of the defined quantiles to quantify uncertainty in estimates.
              
    Model:
      type: object
      description: Represents a machine learning solution.
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          description: The name specified for the model when it was created. The model name must be unique within the namespace it is created in.
        description:
          type: string
          description: Optional. The description specified for the model when it was created.
        defaultVersion:
          type: string
          description: Output only. The default version of the model. This version will be used to handle prediction requests that do not specify a version.
        createTime:
          $ref: "#/components/schemas/DateTime"
        updateTime:
          $ref: "#/components/schemas/DateTime"
        deploymentState:
          description: Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.
          enum:
            - DEPLOYMENT_STATE_UNSPECIFIED
            - DEPLOYED
            - UNDEPLOYED
          type: string
        experimentId:
          $ref: "#/components/schemas/ID"
        modelMetadata:
          $ref: '#/components/schemas/ModelMetadata'
    Version:
      type: object
      description: Represents a version of the model.
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          description: Required. The name of the Version. 
        description:
          type: string
          description: Optional. The description specified for the model when it was created.
        createTime:
          $ref: "#/components/schemas/DateTime"
        updateTime:
          $ref: "#/components/schemas/DateTime"
        error:
          $ref: '#/components/schemas/Status'
        state:
          enum:
            - Draft
            - Training
            - Ready
            - Failed
          type: string
          description: |
             * `Draft` - The version state is unspecified.
             * `Ready` - The version is ready for prediction.
             * `Training` - The version is being trained. New versions.patch and versions.delete requests will fail if a version is in the Training state.
             * `Failed` - error should contain the details of the failure.
        modelMetadata:
          $ref: '#/components/schemas/ModelMetadata'
    ConfusionMatrix:
      type: object
      description: >
        OPTIONAL. Confusion matrix of the evaluation for this confidenceThreshold. A confusion matrix shows how often a model correctly predicted a result. For incorrectly predicted results, the matrix shows what the model predicted instead. The confusion matrix helps you understand where your model is "confusing" two results.
      properties:
        annotationSpecs:
          type: array
          description: >
            AnnotationSpecs used in the confusion matrix.
          items:
            type: object
            properties:
              id:
                type: string
                description: >
                  OPTIONAL. ID of the AnnotationSpec.
              displayName:
                type: string
                description: >
                  Display name of the AnnotationSpec.
          example: 
            - displayName: '1'
            - displayName: '2'
        rows:
          type: array
          description: >
            Rows in the confusion matrix. The number of rows is equal to the size of `annotationSpecs`.
            `row[i][j]` is the number of DataItems that have ground truth of the `annotationSpecs[i]`
            and are predicted as `annotationSpecs[j]` by the Model being evaluated.
          items:
            type: object
            properties:
              row:
                type: array
                items:
                  type: integer
                  format: int64
          example:
            - - 3817
              - 140
            - - 266
              - 244
    ModelExplanation:
      type: object
      description: Aggregated explanation metrics for the Model's prediction output over the data this ModelEvaluation uses. This field is populated only if the Model is evaluated with explanations, and only for AutoML tabular Models.
      properties:
        meanAttributions:
          type: array
          description: Aggregated attributions explaining the Model's prediction outputs over the set of instances. The attributions are grouped by outputs.For Models that predict only one output, such as regression Models that predict only one score, there is only one attibution that explains the predicted output. For Models that predict multiple outputs, such as multiclass Models that predict multiple classes, each element explains one specific item.
          items:
            type: object
            properties:
              featureAttributions:
                type: object
                description: Attributions of each explained feature. Automl platform shows you how much each feature impacts a model. The values are provided as a percentage for each feature, the higher the percentage, the more strongly that feature impacted model training. Review this information to ensure that all of the most important features make sense for your data and business problem.
                example:
                  Age: 0.022972771897912025
                  Job: 0.03154255077242851
                  MaritalStatus: 0.015506803058087826
                  Education: 0.01918913424015045
                  Default: 0.00021766019926872104
                  Balance: 0.031217793002724648
                  Housing: 0.06786702573299408
                  Loan: 0.007259220816195011
                  Contact: 0.08356624096632004
                  Day: 0.07489492744207382
                  Month: 0.19679982960224152
                  Duration: 0.35500210523605347
                  Campaign: 0.03342504799365997
                  PDays: 0.013902961276471615
                  Previous: 0.006168586667627096
                  POutcome: 0.04046733304858208
    Evaluation:
      description: A collection of metrics calculated by comparing Model's predictions on all of the test data against annotations from the test data.
      oneOf:
        - $ref: '#/components/schemas/RegressionEvaluation'
        - $ref: '#/components/schemas/ClassficationEvaluation'
        - $ref: '#/components/schemas/ForecastingEvaluation'
    TabularEvaluation:
      type: object
      description: A collection of metrics calculated by comparing Model's predictions on all of the test data against annotations from the test data.
      properties:
        id:
          $ref: "#/components/schemas/ID"
        performance:
          type: string
          description: model performance rating
          enum:
            - Excellent
            - Great
            - Good
            - Okay
            - Poor
        createTime:
          $ref: "#/components/schemas/DateTime"
    RegressionEvaluation:
      allOf:
        - $ref: "#/components/schemas/TabularEvaluation"
        - type: object
          properties:
            modelExplanation:
              $ref: '#/components/schemas/ModelExplanation'
            metrics:
              title: RegressionEvaluationMetrics
              type: object
              properties:
                rootMeanSquaredError:
                  type: number
                  format: float
                  description: >
                    The root-mean-squared error is the square root of the average squared difference between the target and predicted values. RMSE is more sensitive to outliers than MAE,so if you're concerned about large errors, then RMSE can be a more useful metric to evaluate. Similar to MAE, a smaller value indicates a higher quality model (0 represents a perfect predictor).
                meanAbsoluteError:
                  type: number
                  format: float
                  description: >
                    The mean absolute error (MAE) is the average absolute difference between the target values and the predicted values. This metric ranges from zero to infinity; a lower value indicates a higher quality model.
                meanAbsolutePercentageError:
                  type: number
                  format: float
                  description: >
                    Mean absolute percentage error (MAPE) is the average absolute percentage difference between the labels and the predicted values. This metric ranges between zero and infinity; a lower value indicates a higher quality model. MAPE is not shown if the target column contains any 0 values. In this case, MAPE is undefined.
                rSquared:
                  type: number
                  format: float
                  description: >
                    r squared (r^2) is the square of the Pearson correlation coefficient between the labels and predicted values. This metric ranges between zero and one; a higher value indicates a higher quality model.
                rootMeanSquaredLogError:
                  type: number
                  format: float
                  description: >
                    The root-mean-squared logarithmic error metric is similar to RMSE, except that it uses the natural logarithm of the predicted and actual values plus 1. RMSLE penalizes under-prediction more heavily than over-prediction. It can also be a good metric when you don't want to penalize differences for large prediction values more heavily than for small prediction values. This metric ranges from zero to infinity; a lower value indicates a higher quality model. The RMSLE evaluation metric is returned only if all label and predicted values are non-negative.
              example:
                rootMeanSquaredError: 2553.6309
                meanAbsoluteError: 1373.3932
                meanAbsolutePercentageError: "Infinity"
                rSquared: 0.060764354
                rootMeanSquaredLogError: "NaN"
    ClassficationEvaluation:
      allOf:
        - $ref: "#/components/schemas/TabularEvaluation"
        - type: object
          properties:
            sliceDimensions:
              type: array
              description: Output only. All possible dimensions of ModelEvaluationSlices. 
              items:
                type: string
                example: AnnotationSpec
            modelExplanation:
              $ref: '#/components/schemas/ModelExplanation'
            metrics:
              title: ClassificationEvaluationMetrics
              type: object
              properties:
                auPrc:
                  type: number
                  format: float
                  description: >
                    The area under the precision-recall (PR) curve, also referred to as average precision. This value ranges from zero to one, where a higher value indicates a higher-quality model.
                  example: 0.97762364
                auRoc:
                  type: number
                  format: float
                  description: >
                    The area under receiver operating characteristic curve. This ranges from zero to one, where a higher value indicates a higher-quality model.
                  example: 0.97566897
                logLoss:
                  type: number
                  format: float
                  description: >
                    The cross-entropy between the model predictions and the target values. This ranges from zero to infinity, where a lower value indicates a higher-quality model.
                  example: 0.19153881
                confidenceMetrics:
                  type: array
                  description: >
                    Metrics for each confidenceThreshold in 0.00,0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 and
                    `positionThreshold` = INT32_MAX_VALUE.
                    ROC and precision-recall curves, and other aggregated metrics are derived from them. . 
                  items:
                    type: object
                    properties:
                      confidenceThreshold:
                        type: number
                        format: float
                        description: >
                          Metrics are computed with an assumption that the Model never returns predictions with
                          score lower than this value.  A confidence score that determines which predictions to return. A model returns predictions that are at this value or higher. A higher confidence threshold increases precision but lowers recall. Platform returns confidence metrics at different threshold values to show how the threshold affects precision and recall.
                        example: 0.003269856
                      maxPredictions:
                        type: integer
                        format: int32
                        description: >
                          Metrics are computed with an assumption that the Model always returns at most this many
                          predictions (ordered by their score, descendingly), but they all still need to meet the
                          `confidenceThreshold`.
                      recall:
                        type: number
                        format: float
                        description: >
                          Recall (True Positive Rate) for the given confidence threshold. The fraction of predictions with this class that the model correctly predicted. 
                        example: 0.9997761
                      precision:
                        type: number
                        format: float
                        description: >
                          Precision for the given confidence threshold. The fraction of classification predictions produced by the model that were correct.
                        example: 0.56993365
                      falsePositiveRate:
                        type: number
                        format: float
                        description: >
                          False Positive Rate for the given confidence threshold. The fraction of incorrectly predicted results out of all predicted results.
                        example: 0.7544213
                      f1Score:
                        type: number
                        format: float
                        description: >
                          The harmonic mean of recall and precision. F1 is a useful metric if you're looking for a balance between precision and recall and there's an uneven class distribution.
                        example: 0.7260018
                      recallAt1:
                        type: number
                        format: float
                        description: >
                          The Recall (True Positive Rate) when only considering the
                          label that has the highest prediction score and not below the confidence
                          threshold for each example.
                        example: 0.90911126
                      precisionAt1:
                        type: number
                        format: float
                        description: >
                          The precision when only considering the label that has the
                          highest prediction score and not below the confidence threshold for each example.
                        example: 0.90911126
                      falsePositiveRateAt1:
                        type: number
                        format: float
                        description: >
                          The False Positive Rate when only considering the label that
                          has the highest prediction score and not below the confidence threshold
                          for each example.
                        example: 0.09088874
                      f1ScoreAt1:
                        type: number
                        format: float
                        description: >
                          The harmonic mean of recallAt1 and precisionAt1.
                        example: 0.90911126
                      truePositiveCount:
                        type: integer
                        format: int64
                        description: >
                          The number of times a model correctly predicted a positive class.
                        example: 4466
                      falsePositiveCount:
                        type: integer
                        format: int64
                        description: >
                          The number of times a model mistakenly predicted a positive class.
                        example: 3370
                      falseNegativeCount:
                        type: integer
                        format: int64
                        description: >
                          The number of times a model mistakenly predicted a negative class.
                        example: 1
                      trueNegativeCount:
                        type: integer
                        format: int64
                        description: >
                          The number of times a model correctly predicted a negative class.
                        example: 1097
                confusionMatrix:
                  $ref: "#/components/schemas/ConfusionMatrix"
    ForecastingEvaluation:
      allOf:
        - $ref: "#/components/schemas/TabularEvaluation"
        - type: object
          properties:
            metrics:
              title: ForecastingEvaluationMetrics
              type: object
              properties:
                rootMeanSquaredError:
                  type: number
                  format: float
                  description: >
                    Root Mean Squared Error (RMSE).
                  example: 719.0045
                meanAbsoluteError:
                  type: number
                  format: float
                  description: >
                    Mean Absolute Error (MAE).
                  example: 487.0792
                meanAbsolutePercentageError:
                  type: number
                  format: float
                  description: >
                    Mean absolute percentage error. Infinity when there are zeros in the ground truth.
                  example: "Infinity"
                rSquared:
                  type: number
                  format: float
                  description: >
                    Coefficient of determination as Pearson correlation coefficient. Undefined when ground truth
                    or predictions are constant or near constant.
                  example: 0.8837288
                rootMeanSquaredLogError:
                  type: number
                  format: float
                  description: >
                    Root mean squared log error. Undefined when there are negative ground truth values or
                    predictions.
                  example: "NaN"
                quantileMetrics:
                  type: array
                  description: >
                    The metrics at each quantile point. Only populated if the optimization objective is
                    minimize-quantile-loss.
                  items:
                    type: object
                    properties:
                      quantile:
                        type: number
                        format: double
                        description: >
                          The percent quantile for this point.
                        # exclusiveMinimum: 0.0
                        # exclusiveMaximum: 1.0
                      scaledPinballLoss:
                        type: number
                        format: float
                        description: >
                          The scaled pinball loss at the given quantile.
                      observedQuantile:
                        type: number
                        format: double
                        description: >
                          This is a custom metric that calculates the percentage of true values that were less
                          than the predicted value for that quantile. Only populated when optimizationObjective
                          in TrainingPipeline.training_task_input is minimize-quantile-loss and each entry
                          corresponds to an entry in quantiles in TrainingPipeline.training_task_input.
                        minimum: 0.0
                        maximum: 1.0
                    example:
                      "quantile": 0.2
                      "scaledPinballLoss": 157.34422
                      "observedQuantile": 0.15918367346938775
                weightedAbsolutePercentageError:
                  type: number
                  format: float
                  description: >
                    Weighted absolute percentage error (WAPE). Not calculated using weight column values.
                rootMeanSquaredPercentageError:
                  type: number
                  format: float
                  description: >
                    Root mean sqaured percentage error (RMSPE).
    EvaluationSlice:
      allOf:
        - $ref: '#/components/schemas/Evaluation'
        - type: object
          properties:
            slice:
              type: object
              description: Output only. The slice of the test data that is used to evaluate the Model.
              properties:
                dimension:
                  description: Output only. The dimension of the slice. Well-known dimensions are, annotationSpec, This slice is on the test data that has either ground truth or prediction with AnnotationSpec.display_name equals to value.
                  type: string
                  example: annotationSpec
                value:
                  description: Output only. The value of the dimension in this slice.
                  type: string
    Endpoint:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        modelId:
          # description: The id of the Model resoure that produces the predictions via this job
          $ref: "#/components/schemas/ID"
        versionId:
          # description: specify a version of the model to use. 
          $ref: "#/components/schemas/ID"
        dedicatedResources:
          $ref: "#/components/schemas/DedicatedResources"
        createTime:
          $ref: "#/components/schemas/DateTime"
        updateTime:
          $ref: "#/components/schemas/DateTime"
    Status:
      description: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs. Each `Status` message contains three pieces of data - error code, error message, and error details. 
      properties:
        code:
          description: The status code, which should be an enum value.
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. 
            type: object
          type: array
        message:
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the Status.details field, or localized by the client.
          type: string
      type: object
    Operation:
      description: This resource represents a long-running operation that is the result of a network API call. Some requests start long-running operations that require time to complete. These requests return an operation name, which you can use to view the operation's status or cancel the operation. Most of the API call return as quickly as possible, and provide a complete response. However, there are two kinds of asynchronous operations that you should understand - jobs and long-running operations. When you start an asynchronous operation, you usually want to know when it completes. The process for getting status is different for jobs and long-running operations
      properties:
        done:
          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
          type: boolean
        error:
          # description: The error result of the operation in case of failure or cancellation.
          $ref: '#/components/schemas/Status'
        createTime:
          $ref: "#/components/schemas/DateTime"
        updateTime:
          $ref: "#/components/schemas/DateTime"
        id:
          description: The resource id of the operation
          type: integer
          format: int64
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: | 
            'The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is empty. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
            
            An object containing fields of an arbitrary type. An additional field "@type" contains a URI identifying the type. Example: { "id": 1234, "@type": "TakeSnapshotResponse" }.'
          type: object
      type: object
    ExamplePayload:
      description: Example data used for training or prediction.
      properties:
        row:
          $ref: "#/components/schemas/Row"
          description: Example relational table row.
      type: object
    AnnotationPayload:
      description: Contains annotation information that is relevant to AutoML.
      properties:
        annotationSpecId:
          description: Output only . The resource ID of the annotation spec that this annotation pertains to. The annotation spec comes from either an ancestor dataset, or the dataset that was used to train the model in use.
          type: integer
          format: int64
        displayName:
          description: Output only. The value of display_name when the model was trained. Because this field returns a value at model training time, for different models trained using the same dataset, the returned value could be different as model owner could update the `display_name` between any two model training.
          type: string
        tables:
          $ref: "#/components/schemas/TablesAnnotation"
          description: Annotation details for Tables.
      type: object
    PredictRequest:
      description: Request message for PredictionService.Predict.
      properties:
        parameters:
          additionalProperties:
            type: string
          description: "Additional domain-specific parameters, any string must be up to 25000 characters long. * For Image Classification: `score_threshold` - (float) A value from 0.0 to 1.0. When the model makes predictions for an image, it will only produce results that have at least this confidence score. The default is 0.5. * For Image Object Detection: `score_threshold` - (float) When Model detects objects on the image, it will only produce bounding boxes which have at least this confidence score. Value in 0 to 1 range, default is 0.5. `max_bounding_box_count` - (int64) No more than this number of bounding boxes will be returned in the response. Default is 100, the requested value may be limited by server. * For Tables: feature_importance - (boolean) Whether feature importance should be populated in the returned TablesAnnotation. The default is false."
          type: object
        payload:
          $ref: "#/components/schemas/ExamplePayload"
          description: Required. Payload to perform a prediction on. The payload must match the problem type that the model was trained to solve.
      type: object
    PredictResponse:
      description: Response message for PredictionService.Predict.
      properties:
        payload:
          description: Prediction result. Translation and Text Sentiment will return precisely one payload.
          items:
            $ref: "#/components/schemas/AnnotationPayload"
          type: array
      type: object
    Experiment:
      type: object
      description: An experiment is a grouping of many runs
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          description: Unique experiment name provided by user.
          type: string
        description:
          type: string
        createTime:
          $ref: "#/components/schemas/DateTime"
        updateTime:
          $ref: "#/components/schemas/DateTime"
    Run:
      type: object
      description: A run is a single execution. The model trained in the child run with the best score will be selected as the AutoML model
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          description: Name provided by user, or auto generated if run is created by scheduled job. Not unique.
          type: string
        description:
          type: string
        createTime:
          $ref: "#/components/schemas/DateTime"
        updateTime:
          $ref: "#/components/schemas/DateTime"
        modelMetadata:
          $ref: '#/components/schemas/ModelMetadata'
        experimentId:
          $ref: "#/components/schemas/ID"
        state:
          $ref: '#/components/schemas/State'
        error:
          $ref: '#/components/schemas/Status'
        evaluation:
          $ref: '#/components/schemas/Evaluation'
        parentId:
          # description: Optional. Runs can have an optional parent
          $ref: "#/components/schemas/ID"
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: The number of results to return from offset
      required: false
      schema:
        type: integer
        example: 25
        default: 100
    offset:
      name: offset
      in: query
      description: The initial position from which to return results
      required: false
      schema:
        type: integer
        default: 0
    namespace:
      name: namespace
      in: path
      description: The id of the namespace.
      required: true
      schema:
        type: string
        maxLength: 1024
    user:
      name: user
      in: path
      description: The id of the user.
      required: true
      schema:
        type: string
        maxLength: 1024
    group:
      name: group
      in: path
      description: The id of the group.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-group
    job:
      name: job
      in: path
      description: The id of the job.
      required: true
      schema:
        type: string
        maxLength: 1024
    dataset:
      name: dataset
      in: path
      description: The resource id of the dataset.
      required: true
      schema:
        type: string
        maxLength: 1024
    tableSpec:
      name: tableSpec
      in: path
      description: The resource id of the tableSpec.
      required: true
      schema:
        type: string
        maxLength: 1024
    annotationSpec:
      name: annotationSpec
      in: path
      description: The resource id of the annotationSpec.
      required: true
      schema:
        type: string
        maxLength: 1024
    model:
      name: model
      in: path
      description: The resource id of the model.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-model
    version:
      name: version
      in: path
      description: The resource id of the version.
      required: true
      schema:
        type: string
        maxLength: 1024
    evaluation:
      name: evaluation
      in: path
      description: The resource id of the evaluation.
      required: true
      schema:
        type: string
        maxLength: 1024
    slice:
      name: slice
      in: path
      description: The resource id of the slice.
      required: true
      schema:
        type: string
        maxLength: 1024
    endpoint:
      name: endpoint
      in: path
      description: The resource id of the endpoint.
      required: true
      schema:
        type: string
        maxLength: 1024
    operation:
      name: operation
      in: path
      description: The resource id of the operation.
      required: true
      schema:
        type: string
        maxLength: 1024
  responses:
    NotFound:
      description: The specified resource was not found
      content: {}
    Unauthorized:
      description: Authentication/Authorization error
      content: {}
    IllegalInput:
      description: Illegal input for operation.
    default:
        description: Unexpected error
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  # description: the error schema for JSON HTTP APIs
                  $ref: '#/components/schemas/Status'
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://hub.example/hub/api/oauth2/authorize
          tokenUrl: https://hub.example/hub/api/oauth2/token
          scopes:
            (openapi-reference): https://github.com/jupyterhub/jupyterhub/blob/main/docs/source/_static/rest-api.yml
            (rbac-reference): https://jupyterhub.readthedocs.io/en/stable/rbac/index.html
            (scope-reference): https://jupyterhub.readthedocs.io/en/stable/rbac/scopes.html
            self:
              The user’s own resources
            all:
              Contains all available scopes and grants full rights to all actions.
            admin:users:
              Read, write, create and delete users and their authentication
              state.
            admin:auth_state: Read a user’s authentication state.
            users:
              Read and write permissions to user models (excluding authentication state).
            delete:users: Delete users.
            list:users: List users, including at least their names.
            read:users:
              Read user models (excluding authentication state).
            read:users:name: Read names of users.
            read:users:groups: Read users’ group membership.
            read:roles: Read role assignments.
            read:roles:users: Read user role assignments.
            read:roles:groups: Read group role assignments.
            admin:groups: Read and write group information, create and delete groups.
            groups: Read and write group information, including adding/removing users
              to/from groups.
            list:groups: List groups, including at least their names.
            read:groups: Read group models.
            read:groups:name: Read group names.
            delete:groups: Delete groups.
            read:metrics: Read prometheus metrics.
