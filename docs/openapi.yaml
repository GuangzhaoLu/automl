openapi: 3.0.1
info:
  title: AutoML
  description: 'We are designing the AutoML platform that would make it easy for non-technical people to build custom AI solutions and AI-powered process automation.'
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
externalDocs:
  description: Please copy the entire content of this doc to the swagger editor to design the API
  url: http://editor.swagger.io
servers:
- url: https://development.example.com/v1
  description: Development server
- url: https://staging.example.com/v1
  description: Staging server
- url: https://api.example.com/v1
  description: Production server
security:
  - oauth2:
      - self
tags:
- name: Authorization
  description: Authentication and Authorization
  externalDocs:
    url: https://stackoverflow.blog/2022/04/14/the-authorization-code-grant-in-excruciating-detail/
- name: Namespaces
  description: provides namespace level isolation
- name: Role
  description: Roles can be defined or modified in the configuration file as a list of dictionaries.
  externalDocs:
    url: https://jupyterhub.readthedocs.io/en/stable/rbac/roles.html#define-role-target
- name: User
  description: Operations about user
  externalDocs:
    url: https://github.com/jupyterhub/jupyterhub/blob/main/docs/source/_static/rest-api.yml
- name: Group
  description: Operations about group
- name: Dataset
  description: Management of Dataset
- name: Model
  description: Operations about model
- name: TrainingJob
  description: Operations about TrainingJob
- name: Evaluation
  description: Operations about Evaluation
- name: PredictionJob
  description: Operations about Prediction
- name: Endpoint
  description: Operations about Endpoint
paths:
  /oauth2/authorize:
    get:
      tags:
      - Authorization
      summary: OAuth 2.0 authorize endpoint
      description: |
        Redirect users to this URL to begin the OAuth process.
        It is not an API endpoint.
      parameters:
        - name: client_id
          in: query
          description: The client id
          required: true
          schema:
            type: string
        - name: response_type
          in: query
          description: The response type (always 'code')
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: A state string
          schema:
            type: string
        - name: redirect_uri
          in: query
          description: The redirect url
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content: {}
        400:
          description: OAuth2Error
          content: {}
    post:
      tags:
      - Authorization
      summary: The OAuth server authenticates the user
      description: The OAuth server will render a login form to gather login information, such as a username and password, then the user can enter credentials and the OAuth server authenticates the user.
      operationId: login
      requestBody:
        description: Login Credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
        400:
          description: Invalid username/password supplied
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
  /oauth2/token:
    post:
      tags:
      - Authorization
      summary: Request an OAuth2 token
      description: |
        Request an OAuth2 token from an authorization code.
        This request completes the OAuth process.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - client_id
                - client_secret
                - code
                - grant_type
                - redirect_uri
              properties:
                client_id:
                  type: string
                  description: The client id
                client_secret:
                  type: string
                  description: The client secret
                grant_type:
                  type: string
                  description: The grant type (always 'authorization_code')
                code:
                  type: string
                  description: The code provided by the authorization redirect
                redirect_uri:
                  type: string
                  description: The redirect url
        required: true
      responses:
        200:
          description: JSON response including the token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The new API token for the user
                  token_type:
                    type: string
                    description: Will always be 'Bearer'
  /namespaces/{namespace}:
    parameters:
      - $ref: '#/components/parameters/namespace'
    put:
      operationId: putNamespace
      summary: Create a namespace
      description: Creates a new namespace object. A namespace enables the contextual grouping of related jobs and datasets. Namespaces must contain only letters (`a-z`, `A-Z`), numbers (`0-9`), underscores (`_`), dashes (`-`), colons (`:`), slashes (`/`), or dots (`.`). A namespace is case-insensitive with a maximum length of `1024` characters. Note jobs and datasets will be unique within a namespace, but not across namespaces.
      tags:
        - Namespaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namespace'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
    get:
      operationId: getNamespace
      summary: Retrieve a namespace
      description: Returns a namespace.
      tags:
        - Namespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
  /namespaces:
    get:
      operationId: getNamespaces
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all namespaces
      description: Returns a list of namespaces.
      tags:
        - Namespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Namespace'
  /roles:
    get:
      tags:
      - Role
      summary: List roles
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: The list of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
      security: []
  /user:
    get:
      tags:
      - User
      summary: Return authenticated user's model
      responses:
        200:
          description: |
            The authenticated user's model is returned
            with additional information about the permissions associated with the request token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestIdentity"
      security:
        - oauth2:
            - read:users
            - read:users:name
            - read:users:groups
            - read:roles:users
            - admin:auth_state
  /users:
    get:
      tags:
      - User
      summary: List users
      responses:
        200:
          description: The Hub's user list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
      security:
        - oauth2:
            - read:users
            - read:users:name
            - read:users:groups
            - read:roles:users
            - admin:auth_state
    post:
      tags:
      - User
      summary: Create multiple users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                usernames:
                  type: array
                  description: list of usernames to create on the Hub
                  items:
                    type: string
                admin:
                  type: boolean
                  description: whether the created users should be admins
        required: true
      responses:
        201:
          description: The users have been created
          content:
            application/json:
              schema:
                type: array
                description: The created users
                items:
                  $ref: "#/components/schemas/User"
      security:
        - oauth2:
            - admin:users
      x-codegen-request-body-name: body
  /users/{name}:
    get:
      tags:
      - User
      summary: Get a user by name
      parameters:
        - name: name
          in: path
          description: username
          required: true
          schema:
            type: string
      responses:
        200:
          description: The User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - oauth2:
            - read:users
            - read:users:name
            - read:users:groups
            - read:roles:users
            - admin:auth_state
    post:
      tags:
      - User
      summary: Create a single user
      parameters:
        - name: name
          in: path
          description: username
          required: true
          schema:
            type: string
      responses:
        201:
          description: The user has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - oauth2:
            - admin:users
    delete:
      tags:
      - User
      summary: Delete a user
      parameters:
        - name: name
          in: path
          description: username
          required: true
          schema:
            type: string
      responses:
        204:
          description: The user has been deleted
          content: {}
      security:
        - oauth2:
            - admin:users
    patch:
      tags:
      - User
      summary: Modify a user
      description: Change a user's name or admin status
      parameters:
        - name: name
          in: path
          description: username
          required: true
          schema:
            type: string
      requestBody:
        description:
          Updated user info. At least one key to be updated (name or admin)
          is required.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description:
                    the new name (optional, if another key is updated i.e.
                    admin)
                admin:
                  type: boolean
                  description:
                    update admin (optional, if another key is updated i.e.
                    name)
        required: true
      responses:
        200:
          description: The updated user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - oauth2:
            - admin:users
      x-codegen-request-body-name: body
  /groups:
    get:
      tags:
      - Group
      summary: List groups
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: The list of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
      security:
        - oauth2:
            - read:groups
            - read:groups:name
            - read:roles:groups
  /groups/{name}:
    get:
      tags:
      - Group
      summary: Get a group by name
      parameters:
        - name: name
          in: path
          description: group name
          required: true
          schema:
            type: string
      responses:
        200:
          description: The group model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
      security:
        - oauth2:
            - read:groups
            - read:groups:name
            - read:roles:groups
    post:
      tags:
      - Group
      summary: Create a group
      parameters:
        - name: name
          in: path
          description: group name
          required: true
          schema:
            type: string
      responses:
        201:
          description: The group has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
      security:
        - oauth2:
            - admin:groups
    delete:
      tags:
      - Group
      summary: Delete a group
      parameters:
        - name: name
          in: path
          description: group name
          required: true
          schema:
            type: string
      responses:
        204:
          description: The group has been deleted
          content: {}
      security:
        - oauth2:
            - admin:groups
  /groups/{name}/users:
    post:
      tags:
      - Group
      summary: Add users to a group
      parameters:
        - name: name
          in: path
          description: group name
          required: true
          schema:
            type: string
      requestBody:
        description: The users to add to the group
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  description: List of usernames to add to the group
                  items:
                    type: string
        required: true
      responses:
        200:
          description: The users have been added to the group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
      security:
        - oauth2:
            - groups
      x-codegen-request-body-name: body
    delete:
      tags:
      - Group
      summary: |
        Remove users from a group
      description: |
        Body should be a JSON dictionary
        where `users` is a list of usernames to remove from the groups.

        ```json
        {
          "users": ["name1", "name2"]
        }
        ```

      parameters:
        - name: name
          in: path
          description: group name
          required: true
          schema:
            type: string
      # requestBody:
      #   description: The users to remove from the group
      #   content:
      #     application/json:
      #       schema:
      #         type: object
      #         properties:
      #           users:
      #             type: array
      #             description: List of usernames to remove from the group
      #             items:
      #               type: string
      #   required: true
      responses:
        200:
          description: The users have been removed from the group
          content: {}
      security:
        - oauth2:
            - groups
      x-codegen-request-body-name: body
  /namespaces/{namespace}/files/{filename}:
    parameters:
      - $ref: '#/components/parameters/namespace'
    post:
      tags:
      - Dataset
      summary: upload files
      operationId: automl.namespaces.files.create
      parameters:
      - name: filename
        in: path
        description: filename
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              description: the attachment content
              format: binary
          multipart/form-data:
            schema:
              required:
              - file
              properties:
                file:
                  type: string
                  description: the attachment content
                  format: binary
        required: true
      responses:
        200:
          description: Upload was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  uri:
                    $ref: "#/components/schemas/URI"
        400:
          description: Invalid input
          content: {}
  /namespaces/{namespace}/datasets:
    parameters:
      - $ref: '#/components/parameters/namespace'
    post:
      tags:
      - Dataset
      description: Creates a dataset.
      operationId: automl.namespaces.datasets.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dataset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
          description: Successful response
    get:
      tags:
      - Dataset
      description: Lists datasets in the namespace.
      operationId: automl.namespaces.datasets.list
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        "200":
          content:
            application/json:
              schema:
                items: 
                  $ref: "#/components/schemas/Dataset"
                type: array
          description: Successful response
  /namespaces/{namespace}/datasets/{dataset}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
    get:
      operationId: getDataset
      summary: Retrieve a dataset
      description: Returns a dataset.
      tags:
        - Dataset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
    delete:
      tags:
      - Dataset
      summary: Delete Dataset by Dataset Id
      operationId: delete_dataset_by_id
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid dataset id value
          content: {}
    patch:
      tags:
      - Dataset
      summary: Modify a dataset
      operationId: patch_dataset_by_id
      requestBody:
        description:
          Updated user info. At least one key to be updated (name or admin)
          is required.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dataset"
        required: true
      responses:
        200:
          description: The updated dataset info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
        400:
          description: Invalid dataset id value
          content: {}
  /namespaces/{namespace}/datasets/{dataset}/tableSpecs:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
    get:
      tags:
      - Dataset
      description: Lists table specs in a dataset.
      operationId: automl.namespaces.datasets.tableSpecs.list
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The table specs read.
                items:
                  $ref: "#/components/schemas/TableSpec"
                type: array
          description: Successful response
  /namespaces/{namespace}/datasets/{dataset}/tableSpecs/{tableSpec}/columnSpecs:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
      - $ref: '#/components/parameters/tableSpec'
    get:
      tags:
      - Dataset
      description: Lists column specs in a table spec.
      operationId: automl.projects.locations.datasets.tableSpecs.columnSpecs.list
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The column specs read.
                items:
                  $ref: "#/components/schemas/ColumnSpec"
                type: array
          description: Successful response
  /namespaces/{namespace}/datasets/{dataset}/annotationSpecs/{annotationSpec}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
      - $ref: '#/components/parameters/annotationSpec'
    get:
      operationId: automl.namespaces.datasets.annotationSpecs.get
      description: Gets an AnnotationSpec.
      tags:
        - Dataset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationSpec'
  /namespaces/{namespace}/models:
    parameters:
      - $ref: '#/components/parameters/namespace'
    get:
      tags:
      - Model
      description: Lists models in the namespace.
      operationId: automl.namespaces.models.list
      responses:
        "200":
          content:
            application/json:
              schema:
                items: 
                  $ref: "#/components/schemas/Model"
                type: array
          description: Successful response
    post:
      tags:
      - Model
      description: Creates a model which will later contain one or more versions
      operationId: automl.namespaces.models.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
          description: Successful response
  /namespaces/{namespace}/models/{model}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/model'
    get:
      operationId: automl.namespaces.models.get
      summary: Retrieve a model
      description: Returns a model.
      tags:
        - Model
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
    patch:
      tags:
      - Model
      summary: Modify a model
      operationId: patch_model_by_id
      requestBody:
        description:
          Updated model info. At least one key to be updated (name or admin)
          is required.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model"
        required: true
      responses:
        200:
          description: The updated dataset info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        400:
          description: Invalid dataset id value
          content: {}
  /namespaces/{namespace}/models/{model}/versions:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/model'
    get:
      tags:
      - Model
      description: Lists versions
      operationId: automl.namespaces.models.versions.list
      responses:
        "200":
          content:
            application/json:
              schema:
                items: 
                  $ref: "#/components/schemas/Version"
                type: array
          description: Successful response
    post:
      tags:
      - Model
      description: Creates a new version of a model
      operationId: automl.namespaces.models.versions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Version"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
          description: Successful response
  /namespaces/{namespace}/models/{model}/versions/{version}:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/model'
    - $ref: '#/components/parameters/version'
    get:
      operationId: automl.namespaces.models.versions.get
      summary: Retrieve a version
      description: Returns a version.
      tags:
        - Model
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
    patch:
      tags:
      - Model
      summary: Modify a version
      operationId: automl.namespaces.models.versions.patch
      requestBody:
        description:
          Updated version info. At least one key to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Version"
        required: true
      responses:
        200:
          description: The updated dataset info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
        400:
          description: Invalid version id value
          content: {}
    delete:
      tags:
      - Model
      summary: Delete version
      operationId: automl.namespaces.models.versions.delete
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid id
          content: {}
  /namespaces/{namespace}/trainingJob:
    parameters:
    - $ref: '#/components/parameters/namespace'
    post:
      tags:
      - TrainingJob
      description: Creates a TrainingJob. When you train a model, several model evaluations are created for it, a summary evaluation, and one evaluation for each annotation.
      operationId: automl.namespaces.trainingJob.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrainingJob"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingJob"
          description: Successful response
  /namespaces/{namespace}/trainingJob/{job}:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/job'
    get:
      tags:
      - TrainingJob
      description: Gets a TrainingJob
      operationId: automl.namespaces.trainingJob.get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingJob'
  /namespaces/{namespace}/models/{model}/versions/{version}/evaluations:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/model'
    - $ref: '#/components/parameters/version'
    get:
      tags:
        - Evaluation
      description: Lists model evaluations.
      operationId: automl.projects.locations.models.version.evaluations.list
      responses:
        "200":
          content:
            application/json:
              schema:
                items: 
                  $ref: "#/components/schemas/Evaluation"
                type: array
          description: Successful response
  /namespaces/{namespace}/models/{model}/versions/{version}/evaluations/{evaluation}/slices:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/model'
    - $ref: '#/components/parameters/version'
    - $ref: '#/components/parameters/evaluation'
    get:
      tags:
        - Evaluation
      description: Lists ModelEvaluationSlices in a ModelEvaluation.
      operationId: automl.projects.locations.models.version.evaluations.slices.list
      responses:
        "200":
          content:
            application/json:
              schema:
                items: 
                  $ref: "#/components/schemas/EvaluationSlice"
                type: array
          description: Successful response
  /namespaces/{namespace}/predictionJob:
    parameters:
    - $ref: '#/components/parameters/namespace'
    post:
      tags:
      - PredictionJob
      description: Creates a predictionJob.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PredictionJob"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PredictionJob"
          description: Successful response
  /namespaces/{namespace}/predictionJob/{job}:
    parameters:
    - $ref: '#/components/parameters/namespace'
    - $ref: '#/components/parameters/job'
    get:
      tags:
      - PredictionJob
      description: Gets a predictionJob
      operationId: automl.namespaces.predictionJob.get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionJob'
  /namespaces/{namespace}/endpoints:
    parameters:
      - $ref: '#/components/parameters/namespace'
    post:
      tags:
      - Endpoint
      description: Creates an Endpoint, If successful, the response body contains a newly created instance of Operation.
      operationId: automl.namespaces.endpoints.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Endpoint"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
    get:
      tags:
      - Endpoint
      description: Lists endpoints in the namespace.
      operationId: automl.namespaces.endpoints.list
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        "200":
          content:
            application/json:
              schema:
                items: 
                  $ref: "#/components/schemas/Endpoint"
                type: array
          description: Successful response
components:
  schemas:
    Namespace:
      type: object
      properties:
        name:
          description: The name of the namespace.
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the namespace was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the namespace was updated.
          type: string
          format: date-time
        ownerName:
          description: The owner of the namespace.
          type: string
        description:
          description: The description of the namespace.
          type: string
      example:
        name: my-namespace
        createdAt: '2019-05-09T19:49:24.201361Z'
        updatedAt: '2019-05-09T19:49:24.201361Z'
        ownerName: me
        description: My first namespace!
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
    ExtendedErrorModel:
      allOf:
      - $ref: '#/components/schemas/ErrorModel'
      - type: object
        required:
        - rootCause
        properties:
          rootCause:
            type: string
    JobState:
      enum:
        - UNSPECIFIED
        - QUEUED
        - PENDING
        - RUNNING
        - SUCCEEDED
        - FAILED
        - CANCELLING
        - CANCELLED
        - PAUSED
      type: string
      description: |
         * `UNSPECIFIED` - The job state is unspecified.
         * `QUEUED` - The job has been just created or resumed and processing has not yet begun.
         * `PENDING` - The service is preparing to run the job.
         * `RUNNING` -   The job is in progress.
         * `SUCCEEDED` - The job completed successfully.
         * `FAILED` - The job failed.
         * `CANCELLING` - The job is being cancelled. From this state the job may only go to either SUCCEEDED, FAILED or CANCELLED.
         * `CANCELLED` - The job has been cancelled.
         * `PAUSED` - The job has been stopped, and can be resumed.
    TrainingJob:
      type: object
      properties:
        jobId:
          type: string
          description: The user-specified id of the job.
        createTime:
          format: datetime
          type: string
          description: Output only. Time when the Job was created.
        startTime:
          format: datetime
          type: string
          description: Output only. Time when the Job for the first time entered the JOB_STATE_RUNNING state.
        endTime:
          format: datetime
          type: string
          description: Output only. Time when the Job entered any of the following states - SUCCEEDED, FAILED, CANCELLED.
        updateTime:
          format: datetime
          type: string
          description: Output only. Time when the Job was most recently updated.
        state:
          $ref: '#/components/schemas/JobState'
        errorMessage:
          description: Output only. The details of a failure or a cancellation.
          type: string
        jobPosition:
          type: integer
          format: int64
          description: Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.
        trainingInput:
          $ref: '#/components/schemas/ModelMetadata'
        trainingOnput:
          type: object
    PredictionJob:
      type: object
      properties:
        jobId:
          type: string
          description: The user-specified id of the job.
        createTime:
          format: datetime
          type: string
          description: Output only. Time when the Job was created.
        startTime:
          format: datetime
          type: string
          description: Output only. Time when the Job for the first time entered the JOB_STATE_RUNNING state.
        endTime:
          format: datetime
          type: string
          description: Output only. Time when the Job entered any of the following states - SUCCEEDED, FAILED, CANCELLED.
        updateTime:
          format: datetime
          type: string
          description: Output only. Time when the Job was most recently updated.
        state:
          $ref: '#/components/schemas/JobState'
        errorMessage:
          description: Output only. The details of a failure or a cancellation.
          type: string
        jobPosition:
          type: integer
          format: int64
          description: Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.
        predictionInput:
          $ref: '#/components/schemas/PredictionInput'
        predictionOutput:
          $ref: '#/components/schemas/PredictionOutput'
    DataFormat:
      type: string
      description: |
         The format used to separate data instances in the source and destination files. 
         * `UNSPECIFIED` - Unspecified format.
         * `JSON` - Each line of the file is a JSON dictionary representing one record.
         * `TF_RECORD` - The source file is a TFRecord file. Currently available only for input data.
         * `TF_RECORD_GZIP` - The source file is a GZIP-compressed TFRecord file. Currently available only for input data.
         * `CSV` - 	Values are comma-separated rows, with keys in a separate file. Currently available only for output data.
      enum:
        - UNSPECIFIED
        - JSON
        - TF_RECORD
        - TF_RECORD_GZIP
        - CSV
    PredictionInput:
      type: object
      properties:
        dataFormat:
          # Required. The format of the input data files.
          $ref: "#/components/schemas/DataFormat"
        ouputDataFormat:
          # Optional. Format of the output data files, defaults to JSON.
          $ref: "#/components/schemas/DataFormat"
        inputPaths:
          $ref: "#/components/schemas/URI"
        modelName:
          type: string
          description: The name of the Model resoure that produces the predictions via this job,
        versionName:
          type: string
          description: specify a version of the model to use. 
    DoubleRange:
      description: A range between two double numbers.
      properties:
        end:
          description: End of the range, exclusive.
          format: double
          type: number
        start:
          description: Start of the range, inclusive.
          format: double
          type: number
      type: object
    PredictionOutput:
      description: Contains prediction details specific to Tabular.
      properties:
        baselineScore:
          description: Output only. Stores the prediction score for the baseline example, which is defined as the example with all values set to their baseline values. This is used as part of the Sampled Shapley explanation of the model's prediction. This field is populated only when feature importance is requested. For regression models, this holds the baseline prediction for the baseline example. For classification models, this holds the baseline prediction for the baseline example for the argmax class.
          format: float
          type: number
        predictionInterval:
          $ref: "#/components/schemas/DoubleRange"
          description: Output only. Only populated when target_column_spec has FLOAT64 data type. An interval in which the exactly correct target value has 95% chance to be in.
        score:
          description: Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher value means greater confidence in the returned value. For target_column_spec of FLOAT64 data type the score is not populated.
          format: float
          type: number
        value:
          description: "The predicted value of the row's target_column. The value depends on the column's DataType: * CATEGORY - the predicted (with the above confidence `score`) CATEGORY value. * FLOAT64 - the predicted (with above `prediction_interval`) FLOAT64 value."
      type: object
    Credentials:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        password:
          type: string
          format: encrypted string
    User:
      type: object
      properties:
        name:
          type: string
          description: The user's name
        admin:
          type: boolean
          description: Whether the user is an admin
        roles:
          type: array
          description: The names of roles this user has
          items:
            type: string
        groups:
          type: array
          description: The names of groups where this user is a member
          items:
            type: string
        pending:
          type: string
          description: The currently pending action, if any
          enum:
            - spawn
            - stop
        auth_state:
          type: object
          properties: {}
          description: |
            Authentication state of the user. Only available with admin:users:auth_state
            scope. None otherwise.
    Group:
      type: object
      properties:
        name:
          type: string
          description: The group's name
        users:
          type: array
          description: The names of users who are members of this group
          items:
            type: string
        roles:
          type: array
          description: The names of roles this group has
          items:
            type: string
    Role:
      type: object
      properties:
        name:
          type: string
          description: The role's name
        description:
          type: string
          description: The role's description
        scopes:
          type: array
          description: Roles are collections of scopes that specify the level of what a client is allowed to do
          items:
            type: string
    RequestIdentity:
      description: |
        The model for the entity making the request.
        Extends User model to add information about the specific credentials (e.g. session).
      allOf:
        - type: object
          oneOf:
            - $ref: "#/components/schemas/User"
          discriminator:
            propertyName: kind
            mapping:
              user: "#/components/schemas/User"
        - type: object
          properties:
            session_id:
              type: string
              nullable: true
              description: |
                The session id associated with the request's OAuth token, if any.
                null, if the request token not associated with a session id.

                Added in 2.0.
            scopes:
              type: array
              description: |
                The list of all expanded scopes the request credentials have access to.

                Added in 2.0.
              items:
                type: string
              example:
                - "read:users"
    URI:
      oneOf:
        - type: string
          description: Paths (URIs) to the Minio buckets containing the training data. There can be more than one.
          example: s3://datasets/train.csv
        - type: array
          description: multiple files
          items:
            type: string
            description: Paths (URIs) to the Minio buckets containing the training data. There can be more than one.
            example: s3://datasets/train.csv
    Dataset:
      description: A workspace for solving a single, particular machine learning (ML) problem. A workspace contains examples that may be annotated.
      properties:
        createTime:
          description: Output only. Timestamp when this dataset was created.
          format: datetime
          type: string
        description:
          description: User-provided description of the dataset. The description can be up to 25000 characters long.
          type: string
        namespace:
          type: string
          description: The namespace of the dataset.
        name:
          type: string
          description: The name of the dataset.
        dataset_id:
          description: "The resource id of the dataset"
          type: string
        uri:
          $ref: "#/components/schemas/URI"
      type: object
    TableSpec:
      description: A specification of a relational table. The table's schema is represented via its child column specs. 
      properties:
        columnCount:
          description: Output only. The number of columns of the table. That is, the number of child ColumnSpec-s.
          format: int64
          type: string
        name:
          description: Output only. The resource name of the table spec. 
          type: string
        rowCount:
          description: Output only. The number of rows (i.e. examples) in the table.
          format: int64
          type: string
        validRowCount:
          description: Output only. The number of valid rows (i.e. without values that don't match DataType-s of their columns).
          format: int64
          type: string
        uri:
          $ref: "#/components/schemas/URI"
      type: object
    ColumnSpec:
      type: object
      description: A representation of a column in a relational table. 
      properties:
        name:
          type: string
          description: Output only. The resource name of the column specs. 
        dataType:
          enum:
            - UNSPECIFIED
            - FLOAT64
            - TIMESTAMP
            - STRING
            - CATEGORY
          type: string
          description: The data type of elements stored in the column.
    AnnotationSpec:
      description: A definition of an annotation spec.
      properties:
        displayName:
          description: Required. The name of the annotation spec to show in the interface. The name can be up to 32 characters long and must match the regexp `[a-zA-Z0-9_]+`.
          type: string
        name:
          description: Output only. Resource name of the annotation spec. 
          type: string
        createTime:
          format: datetime
          type: string
          description: Output only. Timestamp when this AnnotationSpec was created.
        updateTime:
          format: datetime
          type: string
          description: Output only. Timestamp when AnnotationSpec was last updated.
      type: object
    ModelMetadata:
      description: Union field model_metadata. The model metadata that is specific to the problem type. Must match the metadata type of the dataset used to train the model. model_metadata can be only one of the following
      oneOf:
        - $ref: '#/components/schemas/TabularModelMetadata'
    TabularModelMetadata:
      type: object
      description: Metadata for Tabular models, metadata is used to train the model. When you train an AutoML model using a tabular dataset, the platform selects a default optimization objective based on your model type and the data type used for your target column.
      properties:
        name:
          type: string
          description: The resource name of the Model.
        modelType:
          description: The model type that is specific to the problem type. Must match the metadata type of the dataset used to train the model. 
          enum:
            - Tabular
          type: string
        version:
          type: string
          description: The resource name of the Version.
        datasetId:
          description: Optional. The resource ID of the dataset used to create the model. The dataset must come from the same namespace.
          type: string
        disableEarlyStopping:
          description: This disables the early stopping feature. By default, the early stopping feature is enabled, which means ends model training when detects that no more improvents can be made.
          type: boolean
        optimizationObjective:
          description: 'Objective function the model is optimizing towards. The training process creates a model that maximizes/minimizes the value of the objective function over the validation set. The supported optimization objectives depend on the prediction type. If the field is not set, a default objective function is used. CLASSIFICATION_BINARY: "MAXIMIZE_AU_ROC" (default) - Maximize the area under the receiver operating characteristic (ROC) curve. "MINIMIZE_LOG_LOSS" - Minimize log loss. "MAXIMIZE_AU_PRC" - Maximize the area under the precision-recall curve. "MAXIMIZE_PRECISION_AT_RECALL" - Maximize precision for a specified recall value. "MAXIMIZE_RECALL_AT_PRECISION" - Maximize recall for a specified precision value. CLASSIFICATION_MULTI_CLASS : "MINIMIZE_LOG_LOSS" (default) - Minimize log loss. REGRESSION: "MINIMIZE_RMSE" (default) - Minimize root-mean-squared error (RMSE). "MINIMIZE_MAE" - Minimize mean-absolute error (MAE). "MINIMIZE_RMSLE" - Minimize root-mean-squared log error (RMSLE).'
          type: string
        optimizationObjectivePrecisionValue:
          description: Required when optimization_objective is "MAXIMIZE_RECALL_AT_PRECISION". Must be between 0 and 1, inclusive.
          format: float
          type: number
        optimizationObjectiveRecallValue:
          description: Required when optimization_objective is "MAXIMIZE_PRECISION_AT_RECALL". Must be between 0 and 1, inclusive.
          format: float
          type: number
        fractionSplit:
          type: object
          properties:
            trainingFraction:
              format: float
              type: number
              description: The fraction of the input data that is to be used to train the Model.
            validationFraction:
              format: float
              type: number
              description: The fraction of the input data that is to be used to validate the Model.
            testFraction:
              format: float
              type: number
              description: The fraction of the input data that is to be used to evaluate the Model.
        targetColumnSpec:
          $ref: '#/components/schemas/ColumnSpec'
    Model:
      type: object
      description: Represents a machine learning solution.
      properties:
        name:
          type: string
          description: The resource name of the Model.
        displayName:
          type: string
          description: The name specified for the model when it was created. The model name must be unique within the namespace it is created in.
        description:
          type: string
          description: Optional. The description specified for the model when it was created.
        defaultVersion:
          type: string
          description: Output only. The default version of the model. This version will be used to handle prediction requests that do not specify a version.
        createTime:
          description: Output only. Timestamp when this model was created.
          type: string
        updateTime:
          description: Output only. Timestamp when this Model was most recently updated.
          type: string
        deploymentState:
          description: Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.
          enum:
            - DEPLOYMENT_STATE_UNSPECIFIED
            - DEPLOYED
            - UNDEPLOYED
          type: string
        modelMetadata:
          $ref: '#/components/schemas/ModelMetadata'
    Version:
      type: object
      description: Represents a version of the model.
      properties:
        name:
          type: string
          description: Required. The resource name of the Version.
        displayName:
          type: string
          description: Required. The display name of the Version. 
        description:
          type: string
          description: Optional. The description specified for the model when it was created.
        createTime:
          description: Output only. Timestamp when this model was created.
          type: string
        updateTime:
          description: Output only. Timestamp when this Model was most recently updated.
          type: string
        errorMessage:
          description: Output only. The details of a failure or a cancellation.
          type: string
        state:
          enum:
            - Draft
            - Training
            - Ready
            - Failed
          type: string
          description: |
             * `Draft` - The version state is unspecified.
             * `Ready` - The version is ready for prediction.
             * `Training` - The version is being trained. New versions.patch and versions.delete requests will fail if a version is in the Training state.
             * `Failed` - errorMessage should contain the details of the failure.
        modelMetadata:
          $ref: '#/components/schemas/ModelMetadata'
    EvaluationMetrics:
      description: Evaluation metrics of the Model. 
      oneOf:
        - $ref: '#/components/schemas/ClassificationEvaluationMetrics'
        - $ref: '#/components/schemas/RegressionEvaluationMetrics'
    ClassificationEvaluationMetrics:
      type: object
    RegressionEvaluationMetrics:
      type: object
    Evaluation:
      type: object
      description: A collection of metrics calculated by comparing Model's predictions on all of the test data against annotations from the test data.
      properties:
        name:
          description: "Output only. Resource name of the model evaluation"
          type: string
        metrics:
          $ref: '#/components/schemas/EvaluationMetrics'
    EvaluationSlice:
      type: object
    Endpoint:
      type: object
    Status:
      description: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs. Each `Status` message contains three pieces of data - error code, error message, and error details. 
      properties:
        code:
          description: The status code, which should be an enum value
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: A developer-facing error message, which should be in English. 
          type: string
      type: object
    Operation:
      description: This resource represents a long-running operation that is the result of a network API call.
      properties:
        done:
          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
          type: boolean
        error:
          description: The error result of the operation in case of failure or cancellation.
          $ref: '#/components/schemas/Status'
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
          type: object
        name:
          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
          type: object
      type: object
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: The number of results to return from offset
      required: false
      schema:
        type: integer
        example: 25
        default: 100
    offset:
      name: offset
      in: query
      description: The initial position from which to return results
      required: false
      schema:
        type: integer
        default: 0
    namespace:
      name: namespace
      in: path
      description: The name of the namespace.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-namespace
    job:
      name: job
      in: path
      description: The name of the job.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-job
    dataset:
      name: dataset
      in: path
      description: The id of the dataset.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-dataset
    tableSpec:
      name: tableSpec
      in: path
      description: The id of the tableSpec.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-tableSpec
    annotationSpec:
      name: annotationSpec
      in: path
      description: The id of the annotationSpec.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-annotationSpec
    model:
      name: model
      in: path
      description: The id of the model.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-model
    version:
      name: version
      in: path
      description: The id of the version.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: v1
    evaluation:
      name: evaluation
      in: path
      description: The id of the evaluation.
      required: true
      schema:
        type: string
        maxLength: 1024
    slice:
      name: slice
      in: path
      description: The id of the slice.
      required: true
      schema:
        type: string
        maxLength: 1024
  responses:
    NotFound:
      description: The specified resource was not found
      content: {}
    Unauthorized:
      description: Authentication/Authorization error
      content: {}
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://hub.example/hub/api/oauth2/authorize
          tokenUrl: https://hub.example/hub/api/oauth2/token
          scopes:
            (openapi-reference): https://github.com/jupyterhub/jupyterhub/blob/main/docs/source/_static/rest-api.yml
            (rbac-reference): https://jupyterhub.readthedocs.io/en/stable/rbac/index.html
            (scope-reference): https://jupyterhub.readthedocs.io/en/stable/rbac/scopes.html
            self:
              The user’s own resources
            all:
              Contains all available scopes and grants full rights to all actions.
            admin:users:
              Read, write, create and delete users and their authentication
              state.
            admin:auth_state: Read a user’s authentication state.
            users:
              Read and write permissions to user models (excluding authentication state).
            delete:users: Delete users.
            list:users: List users, including at least their names.
            read:users:
              Read user models (excluding authentication state).
            read:users:name: Read names of users.
            read:users:groups: Read users’ group membership.
            read:roles: Read role assignments.
            read:roles:users: Read user role assignments.
            read:roles:groups: Read group role assignments.
            admin:groups: Read and write group information, create and delete groups.
            groups: Read and write group information, including adding/removing users
              to/from groups.
            list:groups: List groups, including at least their names.
            read:groups: Read group models.
            read:groups:name: Read group names.
            delete:groups: Delete groups.
            read:metrics: Read prometheus metrics.
